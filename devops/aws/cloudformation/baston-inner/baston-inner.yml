Description: 
  This template creates the resources requried for a sample VPC, Subnets, InternetGateway 
  and another network resources.

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ClusterStack:
    Description: This value will be used for Resources Name.
    MinLength: '1'
    MaxLength: '10'
    Type: String

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHLocation:
    Description:
      The IP address range that can be used to connect using SSH to the
      Amazon EC2 instances.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  RegionOSAMI:
    ap-northeast-2:
      Linux: ami-863090e8 ## Amazon Linux1
      Ubuntu: ami-e49e398a ## Ubuntu 14.04

Resources:
  WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'

  ######### Network(VPC, Subnets, etc)  ##########
  # This VPC has only 2 public subnets.
  ################################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.200.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.200.100.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${ClusterStack}-Pub1"
        - Key: 'immutable_metadata'
          Value: '{"purpose":"bbd-test"}'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.200.101.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${ClusterStack}-Pub2"
        - Key: 'immutable_metadata'
          Value: '{"purpose":"bbd-test"}'
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ############ Create Security Groups ############
  BastionSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via prot 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  InnerSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: 
      - BastionSG
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSG
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !Ref SSHLocation


  ############ EC2 Instances ###########
  ### Bastion ###
  BastionInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: BastionSG
    Properties:
      ImageId: !FindInMap 
        - RegionOSAMI
        - !Ref 'AWS::Region'
        - Linux
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: BastionHost
      NetworkInterfaces:
        - GroupSet:
          - !Ref BastionSG
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1

  ### Jenkins ###
  InnerInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: InnerSG
    Properties:
      ImageId: !FindInMap 
        - RegionOSAMI
        - !Ref 'AWS::Region'
        - Linux
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Inner
      NetworkInterfaces:
        - GroupSet:
          - !Ref InnerSG
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1

################# Outputs ################
Outputs:
  VpcId:
    Value: !Ref VPC
  BastionPublicIP:
    Value: !GetAtt BastionInstance.PublicIp
  InnerPublicIP:
    Value: !GetAtt InnerInstance.PublicIp
  InnerPrivateIP:
    Value: !GetAtt InnerInstance.PrivateIp
